#This requires AD module.

#Make sure to edit the line 35 to have the correct OU and line 33 to have the company name
function create-user {
   [cmdletbinding()]
    param(
          [Parameter(Mandatory=$True)]
          [string]$firstname,

          [Parameter(Mandatory=$True)]
          [string]$lastname,

          [Parameter(Mandatory=$True)]
          [string]$jobtitle,

          [Parameter(Mandatory=$True)]
          [string]$tel

    )

    $sam = $firstname + "." + $lastname

    $samn = $sam.ToLower()

    $domain = "@domain"

    $params = @{
            displayname = $firstname + " " + $lastname
            name = $firstname + " " + $lastname
            samaccountname = $samn
                    givenname = $firstname
                    surname = $lastname
                    company = "Company"
                    officephone = $tel
                    path = "OU=OU,OU=Managed Users,DC=domain,DC=org,DC=uk"
                    title = $jobtitle
                    description = $jobtitle
                    userprincipalname = $samn + $domain
                    EmailAddress = $samn + $domain
                    enabled = $true
                    accountpassword = read-host "Enter Password" -AsSecureString
                    Otherattributes = @{proxyAddresses = ("SMTP:$samn" + "$domain"), ("SIP:$samn" + "$domain")}
    }
new-aduser @params
}

#This copies the group members of 1 user to another user.

function group-copy {
[cmdletbinding()]
param(
      [Parameter(Mandatory=$True,
      HelpMessage = "Enter the SAMACCOUNTNAME of the first user to copy from")]
      [string]$username1,

      [Parameter(Mandatory=$True,
      HelpMessage = "Enter the SAMACCOUNTNAME of the second user to copy to")]
      [string]$username2
)

Get-ADUser -Identity $username1 -Properties memberof |
Select-Object -ExpandProperty memberof |
Add-ADGroupMember -Members $username2

}

#This sets the generic groups for a new user.

function set-member {
[cmdletbinding()]
param (
          [Parameter(Mandatory=$True)]
          [string]$username
       )

$build = read-host -Prompt "Choose 1 for x86, 2 for x64, 3 for Adobe Standard, 4 for FFB or 5 for Adobe CC."

switch ($build) {

1 {add-adgroupmember -identity "Production Main Pool" -members $username}

2 {add-adgroupmember -identity "Production Office x64 Desktop" -members $username}

3 {add-adgroupmember -identity "Production Main Pool" -members $username}

4 {add-adgroupmember -identity "Production FFB Desktop" -members $username}

5 {add-adgroupmember -identity "Production AdobeCC Desktop" -members $username}

}


add-adgroupmember -identity "sec-emsE5" "$username"

add-adgroupmember -identity "sec-o365e5" "$username"

add-adgroupmember -identity "sec-proxy-user" "$username"

add-adgroupmember -identity "sec_proxy-sync" "$username"

add-adgroupmember -identity "sec-domestic-plan" "$username"


}


function enable-mfa {


Connect-MsolService

$userprincipalname = read-host "Enter user's principal name"


$auth = New-Object -TypeName microsoft.online.administration.strongauthenticationrequirement

$auth.RelyingParty = "*"

$auth.state = "Enforced"

Set-MsolUser -userprincipalname $userprincipalname -StrongAuthenticationrequirements $auth


}


#Create an admin user
function create-adminuser {

    param(
          [Parameter(Mandatory=$True)]
          [string]$firstname,

          [Parameter(Mandatory=$True)]
          [string]$lastname

    )

    $sam = "admin"

    $domain = "@domain"

    $params = @{

            displayname = $firstname + " " + $lastname
            name = $firstname + " " + $lastname
                samaccountname = $sam + $firstname.ToLower()[0] + $lastname.ToLower()[0]
                givenname = $firstname
                surname = $lastname
                path = "OU=Admin Accounts,OU=Managed Users,DC=domain,DC=org,DC=uk"
                userprincipalname = $sam + $firstname.ToLower()[0] + $lastname.ToLower()[0] + $domain
                enabled = $true
                accountpassword = read-host "Enter Password" -AsSecureString
    }
new-aduser @params

}
