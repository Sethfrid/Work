#This requires AD module.


function create-user {
   [cmdletbinding()]
    param(
          [Parameter(Mandatory=$True)]
          [string]$firstname,

          [Parameter(Mandatory=$True)]
          [string]$lastname,

          [Parameter(Mandatory=$True)]
          [string]$jobtitle,

          [Parameter(Mandatory=$True)]
          [string]$tel

    )

    $sam = $firstname.ToLower() + "." + $lastname.ToLower()

    $newuser = @{
            displayname = $firstname + " " + $lastname
            name = $firstname + " " + $lastname
            samaccountname = $firstname.ToLower() + "." + $lastname.ToLower()
               givenname = $firstname
               surname = $lastname
               company = "UK Finance"
               officephone = $tel
               path = "OU=Angel Court Users,OU=Managed Users,DC=domain,DC=,DC="
               title = $jobtitle
               description = $jobtitle
               userprincipalname = "$firstname.$lastname@domain".ToLower()
               EmailAddress = "$firstname.$lastname@domain".ToLower()
               enabled = $true
               accountpassword = read-host "Enter Password" -AsSecureString
               Otherattributes = @{proxyAddresses = ("SMTP:$sam" + "@domain"), ("SIP:$sam" + "@domain")}
    }
new-aduser @newuser
}


function group-copy {
[cmdletbinding()]
param(
      [Parameter(Mandatory=$True,
      HelpMessage = "Enter the SAMACCOUNTNAME of the first user to copy from")]
      [string]$username1,

      [Parameter(Mandatory=$True,
      HelpMessage = "Enter the SAMACCOUNTNAME of the second user to copy to")]
      [string]$username2
)

Get-ADUser -Identity $username1 -Properties memberof |
Select-Object -ExpandProperty memberof |
Add-ADGroupMember -Members $username2

}


function set-member {
[cmdletbinding()]
param (
          [Parameter(Mandatory=$True)]
          [string]$username
       )

$build = read-host -Prompt "Choose 1 for x86, 2 for x64, 3 for Adobe Standard, 4 for FFB or 5 for Adobe CC."

switch ($build) {

1 {add-adgroupmember -identity "Production Main Pool" -members $username}

2 {add-adgroupmember -identity "Production Office x64 Desktop" -members $username}

3 {add-adgroupmember -identity "Production Main Pool" -members $username}

4 {add-adgroupmember -identity "Production FFB Desktop" -members $username}

5 {add-adgroupmember -identity "Production AdobeCC Desktop" -members $username}

}


add-adgroupmember -identity "sec-emsE5" "$username"

add-adgroupmember -identity "sec-o365e5" "$username"

add-adgroupmember -identity "sec-proxy-user" "$username"

add-adgroupmember -identity "sec_proxy-sync" "$username"

add-adgroupmember -identity "sec-domestic-plan" "$username"


}


function create-adminuser {

    param(
          [Parameter(Mandatory=$True)]
          [string]$firstname,

          [Parameter(Mandatory=$True)]
          [string]$lastname

    )

    $params = @{

        displayname = $firstname + " " + $lastname
        name = $firstname + " " + $lastname
           samaccountname = "adminqnrl" + $firstname.ToLower()[0] + $lastname.ToLower()[0]
           givenname = $firstname
           surname = $lastname
           path = "OU=Admin Accounts,OU=Managed Users,DC=domain,DC=,DC="
           userprincipalname = "adminqnrl" + $firstname.ToLower()[0] + $lastname.ToLower()[0] + "@domain"
           enabled = $true
           accountpassword = read-host "Enter Password" -AsSecureString
    }
new-aduser @params

}

